"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞
"""

import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, List

def validate_stepik_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –°—Ç–µ–ø–∏–∫"""
    pattern = r'^https://stepik\.org/(lesson|course|step)/\d+'
    return bool(re.match(pattern, url))

def validate_stepik_id(stepik_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ID –°—Ç–µ–ø–∏–∫–∞"""
    return stepik_id.isdigit() and len(stepik_id) >= 3

def validate_full_name(full_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –§–ò–û"""
    parts = full_name.strip().split()
    return len(parts) >= 2 and all(part.isalpha() for part in parts)

def format_datetime(dt_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M')
    except:
        return dt_str

def calculate_grade_percentage(score: int, max_score: int) -> str:
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏"""
    if max_score == 0:
        return "0%"
    
    percentage = (score / max_score) * 100
    if percentage >= 90:
        return f"{percentage:.1f}% (–û—Ç–ª–∏—á–Ω–æ)"
    elif percentage >= 80:
        return f"{percentage:.1f}% (–•–æ—Ä–æ—à–æ)"
    elif percentage >= 70:
        return f"{percentage:.1f}% (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
    else:
        return f"{percentage:.1f}% (–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"

def get_emoji_for_score(score: int, max_score: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    if max_score == 0:
        return "‚ùå"
    
    percentage = (score / max_score) * 100
    if percentage >= 90:
        return "üåü"
    elif percentage >= 80:
        return "‚úÖ"
    elif percentage >= 70:
        return "üëç"
    elif percentage >= 50:
        return "‚ö†Ô∏è"
    else:
        return "‚ùå"

def format_test_submission_guide() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–∞"""
    return """
üì§ <b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç:</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

<code>–§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
ID –°—Ç–µ–ø–∏–∫–∞: 123456
–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç: https://stepik.org/lesson/123456/step/1
–¢–∏–ø —Ç–µ—Å—Ç–∞: 3</code>

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –§–ò–û: –º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
‚Ä¢ ID –°—Ç–µ–ø–∏–∫–∞: —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
‚Ä¢ –°—Å—ã–ª–∫–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å stepik.org
‚Ä¢ –¢–∏–ø —Ç–µ—Å—Ç–∞: 3 –∏–ª–∏ 5 –±–∞–ª–ª–æ–≤

<b>–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:</b>
‚Ä¢ https://stepik.org/lesson/123456/step/1
‚Ä¢ https://stepik.org/course/789012/step/2
"""

def create_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return "‚ñë" * length
    
    filled = int((current / total) * length)
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    percentage = (current / total) * 100
    
    return f"{bar} {percentage:.1f}%"

def get_time_ago(dt_str: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X –Ω–∞–∑–∞–¥'"""
    try:
        dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        now = datetime.now()
        diff = now - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def validate_test_data(data: Dict[str, str]) -> Dict[str, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û
    if '–§–ò–û' not in data or not validate_full_name(data['–§–ò–û']):
        errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –°—Ç–µ–ø–∏–∫–∞
    if 'ID –°—Ç–µ–ø–∏–∫–∞' not in data or not validate_stepik_id(data['ID –°—Ç–µ–ø–∏–∫–∞']):
        errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –°—Ç–µ–ø–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
    if '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç' not in data or not validate_stepik_url(data['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç']):
        errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if '–¢–∏–ø —Ç–µ—Å—Ç–∞' not in data or data['–¢–∏–ø —Ç–µ—Å—Ç–∞'] not in ['3', '5']:
        errors.append("–¢–∏–ø —Ç–µ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3 –∏–ª–∏ 5")
    
    return {
        'is_valid': len(errors) == 0,
        'errors': errors
    }

def format_statistics_summary(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    total_tests = stats.get('total_tests', 0)
    reviewed_tests = stats.get('reviewed_tests', 0)
    pending_tests = stats.get('pending_tests', 0)
    avg_score = stats.get('average_score', 0)
    
    progress_bar = create_progress_bar(reviewed_tests, total_tests)
    
    return f"""
üìä <b>–°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {stats.get('total_students', 0)}
üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}
‚úÖ –û—Ü–µ–Ω–µ–Ω–æ: {reviewed_tests}
‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending_tests}

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}
üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score}

{get_emoji_for_score(avg_score, 5)} –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {calculate_grade_percentage(avg_score, 5)}
"""

def generate_feedback_message(score: int, max_score: int, comment: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
    emoji = get_emoji_for_score(score, max_score)
    percentage = calculate_grade_percentage(score, max_score)
    
    message = f"{emoji} <b>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {score}/{max_score}</b>\n"
    message += f"üìä {percentage}\n"
    
    if comment:
        message += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>\n{comment}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if score == max_score:
        message += "\n\nüéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif score >= max_score * 0.8:
        message += "\n\nüëç –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã."
    elif score >= max_score * 0.6:
        message += "\n\nüìö –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
    else:
        message += "\n\nüí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    
    return message



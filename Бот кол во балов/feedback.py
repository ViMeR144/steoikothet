"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –±–æ—Ç–∞
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional
from database import Database

class FeedbackSystem:
    def __init__(self, db: Database):
        self.db = db
        self.setup_feedback_tables()
    
    def setup_feedback_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        conn = self.db.db_name
        import sqlite3
        
        with sqlite3.connect(conn) as connection:
            cursor = connection.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS feedback (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    feedback_type TEXT CHECK(feedback_type IN ('bug', 'suggestion', 'compliment', 'question')),
                    message TEXT NOT NULL,
                    rating INTEGER CHECK(rating >= 1 AND rating <= 5),
                    is_processed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    message TEXT NOT NULL,
                    notification_type TEXT CHECK(notification_type IN ('info', 'warning', 'success', 'error')),
                    is_read BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            connection.commit()
    
    def submit_feedback(self, user_id: int, feedback_type: str, message: str, rating: Optional[int] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_name) as connection:
                cursor = connection.cursor()
                
                cursor.execute('''
                    INSERT INTO feedback (user_id, feedback_type, message, rating)
                    VALUES (?, ?, ?, ?)
                ''', (user_id, feedback_type, message, rating))
                
                connection.commit()
                return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            return False
    
    def get_feedback_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_name) as connection:
                cursor = connection.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                cursor.execute('SELECT COUNT(*) FROM feedback')
                total_feedback = cursor.fetchone()[0]
                
                # –û—Ç–∑—ã–≤—ã –ø–æ —Ç–∏–ø–∞–º
                cursor.execute('''
                    SELECT feedback_type, COUNT(*) 
                    FROM feedback 
                    GROUP BY feedback_type
                ''')
                feedback_by_type = dict(cursor.fetchall())
                
                # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                cursor.execute('SELECT AVG(rating) FROM feedback WHERE rating IS NOT NULL')
                avg_rating = cursor.fetchone()[0] or 0
                
                # –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
                cursor.execute('SELECT COUNT(*) FROM feedback WHERE is_processed = FALSE')
                unprocessed = cursor.fetchone()[0]
                
                return {
                    'total_feedback': total_feedback,
                    'feedback_by_type': feedback_by_type,
                    'average_rating': round(avg_rating, 2),
                    'unprocessed_feedback': unprocessed
                }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return {}
    
    def send_notification(self, user_id: int, message: str, notification_type: str = 'info') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_name) as connection:
                cursor = connection.cursor()
                
                cursor.execute('''
                    INSERT INTO notifications (user_id, message, notification_type)
                    VALUES (?, ?, ?)
                ''', (user_id, message, notification_type))
                
                connection.commit()
                return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_user_notifications(self, user_id: int, unread_only: bool = True) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_name) as connection:
                cursor = connection.cursor()
                
                query = 'SELECT * FROM notifications WHERE user_id = ?'
                params = [user_id]
                
                if unread_only:
                    query += ' AND is_read = FALSE'
                
                query += ' ORDER BY created_at DESC LIMIT 10'
                
                cursor.execute(query, params)
                notifications = cursor.fetchall()
                
                return [{
                    'id': notif[0],
                    'user_id': notif[1],
                    'message': notif[2],
                    'notification_type': notif[3],
                    'is_read': bool(notif[4]),
                    'created_at': notif[5]
                } for notif in notifications]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    def mark_notification_read(self, notification_id: int) -> bool:
        """–û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_name) as connection:
                cursor = connection.cursor()
                
                cursor.execute('''
                    UPDATE notifications 
                    SET is_read = TRUE 
                    WHERE id = ?
                ''', (notification_id,))
                
                connection.commit()
                return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_feedback_form_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="feedback_bug")],
            [InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_suggestion")],
            [InlineKeyboardButton("üëç –ü–æ—Ö–≤–∞–ª–∏—Ç—å", callback_data="feedback_compliment")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="feedback_question")],
            [InlineKeyboardButton("üìä –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞", callback_data="feedback_rating")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_rating_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚≠ê 1", callback_data="rating_1"),
             InlineKeyboardButton("‚≠ê‚≠ê 2", callback_data="rating_2"),
             InlineKeyboardButton("‚≠ê‚≠ê‚≠ê 3", callback_data="rating_3")],
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê 4", callback_data="rating_4"),
             InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5", callback_data="rating_5")]
        ]
        return InlineKeyboardMarkup(keyboard)




import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)
from database import Database
from config import BOT_TOKEN, ADMIN_PASSWORD
from utils import (
    validate_test_data, format_statistics_summary, 
    generate_feedback_message, format_test_submission_guide
)
from feedback import FeedbackSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTRATION, TEACHER_PASSWORD, STUDENT_DATA, TEST_SUBMISSION = range(4)

class StepikBot:
    def __init__(self):
        self.db = Database()
        self.feedback_system = FeedbackSystem(self.db)
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start_command)],
            states={
                REGISTRATION: [CallbackQueryHandler(self.registration_callback)],
                TEACHER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.teacher_password_handler)],
                STUDENT_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.student_data_handler)],
                TEST_SUBMISSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text)]
            },
            fallbacks=[CommandHandler('cancel', self.cancel_command)]
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(registration_handler)
        self.application.add_handler(CommandHandler('help', self.help_command))
        self.application.add_handler(CommandHandler('profile', self.profile_command))
        self.application.add_handler(CommandHandler('stats', self.stats_command))
        self.application.add_handler(CommandHandler('admin', self.admin_command))
        self.application.add_handler(CommandHandler('feedback', self.feedback_command))
        self.application.add_handler(CommandHandler('notifications', self.notifications_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if user_data and user_data['is_approved']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω
            await self.show_main_menu(update, context, user_data['role'])
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")],
            [InlineKeyboardButton("üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç", callback_data="role_student")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Å—Ç–æ–≤ –°—Ç–µ–ø–∏–∫–∞!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—ã –∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –±–∞–ª–ª—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:
        """
        
        await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
        return REGISTRATION
    
    async def registration_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        role = query.data.split('_')[1]  # teacher –∏–ª–∏ student
        
        context.user_data['role'] = role
        
        if role == 'teacher':
            await query.edit_message_text(
                "üîê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                parse_mode='HTML'
            )
            return TEACHER_PASSWORD
        else:
            await query.edit_message_text(
                "üë®‚Äçüéì <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
                parse_mode='HTML'
            )
            return STUDENT_DATA
    
    async def teacher_password_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        password = update.message.text.strip()
        
        if password == ADMIN_PASSWORD:
            user = update.effective_user
            success = self.db.add_user(
                user.id, user.username or "", 
                user.first_name or "", user.last_name or "", 
                "teacher"
            )
            
            if success:
                self.db.approve_user(user.id)
                await update.message.reply_text(
                    "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                    "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. "
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–µ—Å—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
                    parse_mode='HTML'
                )
                await self.show_teacher_menu(update, context)
                return ConversationHandler.END
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return TEACHER_PASSWORD
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return TEACHER_PASSWORD
    
    async def student_data_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        full_name = update.message.text.strip()
        
        if len(full_name.split()) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)."
            )
            return STUDENT_DATA
        
        user = update.effective_user
        success = self.db.add_user(
            user.id, user.username or "", 
            user.first_name or "", user.last_name or "", 
            "student"
        )
        
        if success:
            self.db.approve_user(user.id)
            context.user_data['full_name'] = full_name
            
            await update.message.reply_text(
                f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö.\n\n"
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /submit_test",
                parse_mode='HTML'
            )
            await self.show_student_menu(update, context)
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return STUDENT_DATA
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, role: str):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
        if role == 'teacher':
            await self.show_teacher_menu(update, context)
        else:
            await self.show_student_menu(update, context)
    
    async def show_teacher_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–æ–≤", callback_data="view_tests")],
            [InlineKeyboardButton("üë• –í—ã–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="select_student")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üë®‚Äçüè´ <b>–ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_student_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_tests = self.db.get_student_tests(user.id)
        total_tests = len(student_tests)
        reviewed_tests = len([t for t in student_tests if t['is_reviewed']])
        total_score = sum(t['score'] for t in student_tests if t['is_reviewed'])
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="submit_test")],
            [InlineKeyboardButton("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_results")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üë®‚Äçüéì <b>–ü–∞–Ω–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n\n"
        text += f"üéØ <b>–í–∞—à–∏ –±–∞–ª–ª—ã:</b> {total_score}\n"
        text += f"üìù <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {total_tests}\n"
        text += f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {reviewed_tests}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await update.message.reply_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data or not user_data['is_approved']:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.")
            return
        
        action = query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {action}")
        
        if action == "view_tests" and user_data['role'] == 'teacher':
            await self.show_pending_tests(query, context)
        elif action == "select_student" and user_data['role'] == 'teacher':
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º select_student –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            await self.show_student_selection(query, context)
        elif action == "submit_test" and user_data['role'] == 'student':
            await self.start_test_submission(query, context)
        elif action == "my_results" and user_data['role'] == 'student':
            await self.show_student_results(query, context)
        elif action == "help":
            await self.show_help(query, context)
        elif action.startswith("review_test_"):
            parts = action.split("_")
            logger.info(f"review_test_ action: {action}, parts: {parts}, len: {len(parts)}")
            if len(parts) >= 3:
                try:
                    test_id = int(parts[2])
                    await self.start_test_review(query, context, test_id)
                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ review_test_: {e}")
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        elif action.startswith("score_"):
            parts = action.split("_")
            logger.info(f"score_ action: {action}, parts: {parts}, len: {len(parts)}")
            if len(parts) >= 4:
                try:
                    test_id = int(parts[2])
                    score = int(parts[3])
                    await self.set_test_score(query, context, test_id, score)
                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ score_: {e}")
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        elif action == "feedback":
            await self.show_feedback_menu(query, context)
        elif action == "notifications":
            await self.show_notifications(query, context)
        elif action.startswith("feedback_"):
            parts = action.split("_")
            if len(parts) >= 2:
                feedback_type = parts[1]
                await self.start_feedback_submission(query, context, feedback_type)
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        elif action.startswith("rating_"):
            parts = action.split("_")
            if len(parts) >= 2:
                try:
                    rating = int(parts[1])
                    await self.submit_rating(query, context, rating)
                except ValueError:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        elif action.startswith("student_"):
            parts = action.split("_")
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º student_ callback: {action}, parts: {parts}")
            if len(parts) >= 2:
                try:
                    student_id = int(parts[1])
                    logger.info(f"–í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç —Å ID: {student_id}")
                    await self.show_student_details(query, context, student_id)
                except ValueError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è student_id: {e}")
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
            else:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ student_ callback: {parts}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        elif action == "back_to_main":
            await self.show_main_menu_from_callback(query, context)
        elif action == "back_to_teacher_menu":
            await self.show_teacher_menu_from_callback(query, context)
        elif action == "back_to_student_menu":
            await self.show_student_menu_from_callback(query, context)
    
    async def show_pending_tests(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        tests = self.db.get_pending_tests()
        
        if not tests:
            await query.edit_message_text("üìã –ù–µ—Ç –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
            return
        
        text = "üìã <b>–ù–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:</b>\n\n"
        keyboard = []
        
        for test in tests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            text += f"üÜî ID: {test['id']}\n"
            text += f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {test['full_name']}\n"
            text += f"üÜî –°—Ç–µ–ø–∏–∫ ID: {test['stepik_id']}\n"
            text += f"üîó –°—Å—ã–ª–∫–∞: {test['test_url']}\n"
            text += f"üìù –¢–∏–ø: {test['test_type']} –±–∞–ª–ª–æ–≤\n"
            text += f"üìÖ –î–∞—Ç–∞: {test['submitted_at']}\n"
            text += "‚îÄ" * 30 + "\n"
            
            keyboard.append([
                InlineKeyboardButton(f"–û—Ü–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç #{test['id']}", callback_data=f"review_test_{test['id']}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_teacher_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def start_test_review(self, query, context: ContextTypes.DEFAULT_TYPE, test_id: int):
        """–ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Å—Ç–∞"""
        tests = self.db.get_pending_tests()
        test = next((t for t in tests if t['id'] == test_id), None)
        
        if not test:
            await query.edit_message_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        text = f"üìù <b>–û—Ü–µ–Ω–∫–∞ —Ç–µ—Å—Ç–∞ #{test_id}</b>\n\n"
        text += f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {test['full_name']}\n"
        text += f"üÜî –°—Ç–µ–ø–∏–∫ ID: {test['stepik_id']}\n"
        text += f"üîó –°—Å—ã–ª–∫–∞: {test['test_url']}\n"
        text += f"üìù –¢–∏–ø: {test['test_type']} –±–∞–ª–ª–æ–≤\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç
        max_score = int(test['test_type']) if test['test_type'] else 5
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –ù–µ –∑–∞—Å—á–∏—Ç–∞—Ç—å", callback_data=f"score_{test_id}_0")],
            [InlineKeyboardButton("‚úÖ –ó–∞—Å—á–∏—Ç–∞—Ç—å", callback_data=f"score_{test_id}_{max_score}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="view_tests")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def set_test_score(self, query, context: ContextTypes.DEFAULT_TYPE, test_id: int, score: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞ —Ç–µ—Å—Ç"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ç–µ—Å—Ç–∞ {test_id} —Å –±–∞–ª–ª–æ–º {score}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–æ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            tests = self.db.get_pending_tests()
            test = next((t for t in tests if t['id'] == test_id), None)
            
            if not test:
                logger.error(f"–¢–µ—Å—Ç {test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö")
                await query.edit_message_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç: {test}")
            
            success = self.db.review_test(test_id, score, "–û—Ü–µ–Ω–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º")
            
            if success:
                logger.info(f"–¢–µ—Å—Ç {test_id} —É—Å–ø–µ—à–Ω–æ –æ—Ü–µ–Ω–µ–Ω")
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
                try:
                    simple_message = f"–í–∞—à —Ç–µ—Å—Ç #{test_id} –æ—Ü–µ–Ω–µ–Ω! –ë–∞–ª–ª–æ–≤: {score}"
                    self.feedback_system.send_notification(
                        test['student_id'],
                        simple_message,
                        'success'
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É {test['student_id']}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="view_tests")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if score > 0:
                    await query.edit_message_text(
                        f"‚úÖ <b>–¢–µ—Å—Ç #{test_id} –∑–∞—Å—á–∏—Ç–∞–Ω!</b>\n\n"
                        f"–ë–∞–ª–ª–æ–≤: {score}\n"
                        f"–°—Ç—É–¥–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå <b>–¢–µ—Å—Ç #{test_id} –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω!</b>\n\n"
                        f"–ë–∞–ª–ª–æ–≤: 0\n"
                        f"–°—Ç—É–¥–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ç–µ—Å—Ç–∞ {test_id}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ç–µ—Å—Ç–∞.")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ set_test_score: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ç–µ—Å—Ç–∞.")
    
    async def show_teacher_statistics(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        stats = self.db.get_statistics()
        feedback_stats = self.feedback_system.get_feedback_stats()
        
        text = format_statistics_summary(stats)
        
        if feedback_stats:
            text += "\nüí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>\n"
            text += f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {feedback_stats.get('total_feedback', 0)}\n"
            text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {feedback_stats.get('average_rating', 0)}\n"
            text += f"‚è≥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {feedback_stats.get('unprocessed_feedback', 0)}"
        
        await query.edit_message_text(text, parse_mode='HTML')
    
    async def show_students_scores(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –±–∞–ª–ª–æ–≤ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        students = self.db.get_students_scores()
        
        if not students:
            await query.edit_message_text("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return
        
        text = "üèÜ <b>–ë–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b>\n\n"
        
        for i, student in enumerate(students, 1):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            first_name = student['first_name'] or ''
            last_name = student['last_name'] or ''
            name = f"{first_name} {last_name}".strip()
            
            if not name:
                name = f"–°—Ç—É–¥–µ–Ω—Ç #{student['user_id']}"
            
            text += f"{i}. <b>{name}</b>\n"
            text += f"   üÜî –°—Ç–µ–ø–∏–∫ ID: {student.get('stepik_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   üéØ –ë–∞–ª–ª–æ–≤: {student['total_score']}\n"
            text += f"   üìù –¢–µ—Å—Ç–æ–≤: {student['reviewed_tests']}/{student['total_tests']}\n"
            
            if student['total_tests'] > 0:
                percentage = (student['reviewed_tests'] / student['total_tests']) * 100
                text += f"   üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {percentage:.1f}%\n"
            
            text += "‚îÄ" * 30 + "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_score = sum(s['total_score'] for s in students)
        text += f"\nüìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}\n"
        text += f"üéØ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_score}\n"
        text += f"üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {total_score / len(students) if students else 0:.1f}"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_teacher_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_student_selection(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            students = self.db.get_students_scores()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students) if students else 0}")
            
            if not students:
                logger.info("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                await query.edit_message_text("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
                return
            
            text = "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n\n"
            
            keyboard = []
            for student in students:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                first_name = student['first_name'] or ''
                last_name = student['last_name'] or ''
                name = f"{first_name} {last_name}".strip()
                
                if not name:
                    name = f"–°—Ç—É–¥–µ–Ω—Ç #{student['user_id']}"
                
                button_text = f"{name} ({student['total_score']} –±–∞–ª–ª–æ–≤)"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"student_{student['user_id']}")])
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {name} (ID: {student['user_id']})")
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_teacher_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
            logger.info("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_student_selection: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    
    async def show_student_details(self, query, context: ContextTypes.DEFAULT_TYPE, student_id: int):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student_data = self.db.get_user(student_id)
        if not student_data:
            await query.edit_message_text("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_tests = self.db.get_student_tests(student_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        first_name = student_data['first_name'] or ''
        last_name = student_data['last_name'] or ''
        name = f"{first_name} {last_name}".strip()
        
        if not name:
            name = f"–°—Ç—É–¥–µ–Ω—Ç #{student_id}"
        
        text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:</b>\n\n"
        text += f"üìù <b>–ò–º—è:</b> {name}\n"
        text += f"üÜî <b>–°—Ç–µ–ø–∏–∫ ID:</b> {student_data['stepik_id'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üìß <b>Telegram ID:</b> {student_id}\n\n"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tests = len(student_tests)
        reviewed_tests = len([t for t in student_tests if t['is_reviewed']])
        total_score = sum(t['score'] for t in student_tests if t['is_reviewed'])
        
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üéØ <b>–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:</b> {total_score}\n"
        text += f"üìù <b>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</b> {total_tests}\n"
        text += f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {reviewed_tests}\n"
        text += f"‚è≥ <b>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:</b> {total_tests - reviewed_tests}\n\n"
        
        if total_tests > 0:
            percentage = (reviewed_tests / total_tests) * 100
            text += f"üìà <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {percentage:.1f}%\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã
        if student_tests:
            text += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã:</b>\n"
            for i, test in enumerate(student_tests[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status = "‚úÖ" if test['is_reviewed'] else "‚è≥"
                score_text = f"{test['score']} –±–∞–ª–ª–æ–≤" if test['is_reviewed'] else "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
                text += f"{i}. {status} –¢–µ—Å—Ç #{test['id']} - {score_text}\n"
            
            if total_tests > 5:
                text += f"... –∏ –µ—â–µ {total_tests - 5} —Ç–µ—Å—Ç–æ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="select_student")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_teacher_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def start_test_submission(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞"""
        text = format_test_submission_guide()
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_student_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_student_results(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        user = query.from_user
        tests = self.db.get_student_tests(user.id)
        
        if not tests:
            await query.edit_message_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
            return
        
        text = "üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
        total_score = 0
        reviewed_count = 0
        
        for test in tests:
            text += f"üÜî –¢–µ—Å—Ç #{test['id']}\n"
            text += f"üîó {test['test_url']}\n"
            text += f"üìù –¢–∏–ø: {test['test_type']} –±–∞–ª–ª–æ–≤\n"
            
            if test['is_reviewed']:
                text += f"‚úÖ –û—Ü–µ–Ω–∫–∞: {test['score']} –±–∞–ª–ª–æ–≤\n"
                if test['teacher_comment']:
                    text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {test['teacher_comment']}\n"
                total_score += test['score']
                reviewed_count += 1
            else:
                text += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏\n"
            
            text += "‚îÄ" * 30 + "\n"
        
        if reviewed_count > 0:
            text += f"\nüìà <b>–ò—Ç–æ–≥–æ:</b> {total_score} –±–∞–ª–ª–æ–≤ –∏–∑ {reviewed_count} —Ç–µ—Å—Ç–æ–≤"
        else:
            text += f"\nüìà <b>–ò—Ç–æ–≥–æ:</b> 0 –±–∞–ª–ª–æ–≤ (—Ç–µ—Å—Ç—ã –Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã)"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_student_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_help(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b>
‚Ä¢ /submit_test - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç
‚Ä¢ /my_results - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ /profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ

<b>–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ç–µ—Å—Ç–æ–≤ (0-5 –±–∞–ª–ª–æ–≤)
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º

<b>–§–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞:</b>
<code>–§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
ID –°—Ç–µ–ø–∏–∫–∞: 123456
–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç: https://stepik.org/lesson/123456/step/1
–¢–∏–ø —Ç–µ—Å—Ç–∞: 3</code>
        """
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data or not user_data['is_approved']:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ—Å—Ç–∞
        if self.is_test_submission(text):
            await self.process_test_submission(update, context, text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        elif 'feedback_type' in context.user_data:
            await self.process_feedback_submission(update, context, text)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    def is_test_submission(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ—Å—Ç–∞"""
        lines = text.split('\n')
        required_fields = ['–§–ò–û:', 'ID –°—Ç–µ–ø–∏–∫–∞:', '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç:', '–¢–∏–ø —Ç–µ—Å—Ç–∞:']
        return all(any(field in line for line in lines) for field in required_fields)
    
    async def process_test_submission(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if user_data['role'] != 'student':
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç—ã.")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            lines = text.split('\n')
            data = {}
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    data[key.strip()] = value.strip()
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            validation = validate_test_data(data)
            if not validation['is_valid']:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join(validation['errors'])
                )
                return
            
            test_type = data['–¢–∏–ø —Ç–µ—Å—Ç–∞']
            test_url = data['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç
            success = self.db.add_test(
                user.id,
                data['–§–ò–û'],
                data['ID –°—Ç–µ–ø–∏–∫–∞'],
                test_url,
                test_type
            )
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
                student_tests = self.db.get_student_tests(user.id)
                total_tests = len(student_tests)
                reviewed_tests = len([t for t in student_tests if t['is_reviewed']])
                total_score = sum(t['score'] for t in student_tests if t['is_reviewed'])
                
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_student_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üë§ –§–ò–û: {data['–§–ò–û']}\n"
                    f"üÜî ID –°—Ç–µ–ø–∏–∫–∞: {data['ID –°—Ç–µ–ø–∏–∫–∞']}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {test_url}\n"
                    f"üìù –¢–∏–ø: {test_type} –±–∞–ª–ª–æ–≤\n\n"
                    f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"üéØ –ë–∞–ª–ª–æ–≤: {total_score}\n"
                    f"üìù –¢–µ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_tests}\n"
                    f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {reviewed_tests}\n\n"
                    "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏—Ç –≤–∞—à —Ç–µ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        await self.show_help(update, context)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        
        role_emoji = "üë®‚Äçüè´" if user_data['role'] == 'teacher' else "üë®‚Äçüéì"
        role_text = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if user_data['role'] == 'teacher' else "–°—Ç—É–¥–µ–Ω—Ç"
        
        text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

{role_emoji} –†–æ–ª—å: {role_text}
üÜî ID: {user.id}
üë§ –ò–º—è: {user.first_name} {user.last_name or ''}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at']}
‚úÖ –°—Ç–∞—Ç—É—Å: {'–û–¥–æ–±—Ä–µ–Ω' if user_data['is_approved'] else '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}
        """
        
        await update.message.reply_text(text, parse_mode='HTML')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data or user_data['role'] != 'teacher':
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")
            return
        
        await self.show_teacher_statistics(update, context)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data or user_data['role'] != 'teacher':
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")
            return
        
        stats = self.db.get_statistics()
        text = f"""
üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {stats.get('total_students', 0)}
‚Ä¢ –¢–µ—Å—Ç–æ–≤: {stats.get('total_tests', 0)}
‚Ä¢ –û—Ü–µ–Ω–µ–Ω–æ: {stats.get('reviewed_tests', 0)}
‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {stats.get('pending_tests', 0)}

üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /profile - –ø—Ä–æ—Ñ–∏–ª—å
        """
        
        await update.message.reply_text(text, parse_mode='HTML')
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cancel"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    async def feedback_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /feedback"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data or not user_data['is_approved']:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        
        keyboard = self.feedback_system.get_feedback_form_keyboard()
        text = "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
        
        await update.message.reply_text(text, parse_mode='HTML', reply_markup=keyboard)
    
    async def notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /notifications"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data or not user_data['is_approved']:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        
        notifications = self.feedback_system.get_user_notifications(user.id)
        
        if not notifications:
            await update.message.reply_text("üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return
        
        text = "üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
        
        for notif in notifications:
            emoji = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'success': '‚úÖ',
                'error': '‚ùå'
            }.get(notif['notification_type'], 'üì¢')
            
            text += f"{emoji} {notif['message']}\n"
            text += f"üìÖ {notif['created_at']}\n\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
    
    async def show_feedback_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        keyboard = self.feedback_system.get_feedback_form_keyboard()
        text = "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
        
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=keyboard)
    
    async def show_notifications(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user = query.from_user
        notifications = self.feedback_system.get_user_notifications(user.id)
        
        if not notifications:
            await query.edit_message_text("üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return
        
        text = "üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
        
        for notif in notifications:
            emoji = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'success': '‚úÖ',
                'error': '‚ùå'
            }.get(notif['notification_type'], 'üì¢')
            
            text += f"{emoji} {notif['message']}\n"
            text += f"üìÖ {notif['created_at']}\n\n"
        
        await query.edit_message_text(text, parse_mode='HTML')
    
    async def start_feedback_submission(self, query, context: ContextTypes.DEFAULT_TYPE, feedback_type: str):
        """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞"""
        context.user_data['feedback_type'] = feedback_type
        
        type_names = {
            'bug': 'üêõ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
            'suggestion': 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            'compliment': 'üëç –ü–æ—Ö–≤–∞–ª–∞',
            'question': '‚ùì –í–æ–ø—Ä–æ—Å'
        }
        
        text = f"{type_names.get(feedback_type, 'üí¨ –û—Ç–∑—ã–≤')}\n\n"
        text += "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        
        await query.edit_message_text(text, parse_mode='HTML')
    
    async def submit_rating(self, query, context: ContextTypes.DEFAULT_TYPE, rating: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞"""
        user = query.from_user
        success = self.feedback_system.submit_feedback(
            user.id, 'rating', f"–û—Ü–µ–Ω–∫–∞ –±–æ—Ç–∞: {rating} –∑–≤–µ–∑–¥", rating
        )
        
        if success:
            await query.edit_message_text(
                f"‚≠ê <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n\n"
                f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –±–æ—Ç–∞ –Ω–∞ {rating} –∑–≤–µ–∑–¥. "
                "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏.")
    
    async def process_feedback_submission(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        user = update.effective_user
        feedback_type = context.user_data.get('feedback_type')
        
        if not feedback_type:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
            return
        
        success = self.feedback_system.submit_feedback(user.id, feedback_type, text)
        
        if success:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('feedback_type', None)
            
            await update.message.reply_text(
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!</b>\n\n"
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ. "
                "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
            await self.notify_teachers_about_feedback(feedback_type, text)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def notify_teachers_about_feedback(self, feedback_type: str, message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            import sqlite3
            with sqlite3.connect(self.db.db_name) as connection:
                cursor = connection.cursor()
                cursor.execute('SELECT user_id FROM users WHERE role = "teacher" AND is_approved = TRUE')
                teachers = cursor.fetchall()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for teacher_id, in teachers:
                self.feedback_system.send_notification(
                    teacher_id,
                    f"–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ({feedback_type}): {message[:100]}...",
                    'info'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    async def show_main_menu_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ callback"""
        user = query.from_user
        user_data = self.db.get_user(user.id)
        
        if user_data and user_data['is_approved']:
            if user_data['role'] == 'teacher':
                await self.show_teacher_menu_from_callback(query, context)
            else:
                await self.show_student_menu_from_callback(query, context)
        else:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    
    async def show_teacher_menu_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ callback"""
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–æ–≤", callback_data="view_tests")],
            [InlineKeyboardButton("üë• –í—ã–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="select_student")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üë®‚Äçüè´ <b>–ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_student_menu_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ callback"""
        user = query.from_user
        user_data = self.db.get_user(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_tests = self.db.get_student_tests(user.id)
        total_tests = len(student_tests)
        reviewed_tests = len([t for t in student_tests if t['is_reviewed']])
        total_score = sum(t['score'] for t in student_tests if t['is_reviewed'])
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="submit_test")],
            [InlineKeyboardButton("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_results")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üë®‚Äçüéì <b>–ü–∞–Ω–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n\n"
        text += f"üéØ <b>–í–∞—à–∏ –±–∞–ª–ª—ã:</b> {total_score}\n"
        text += f"üìù <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {total_tests}\n"
        text += f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {reviewed_tests}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if update and update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            import asyncio
            asyncio.run(self._run_async())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∑–∞–ø—É—Å–∫—É
            try:
                self.application.run_polling()
            except Exception as e2:
                logger.error(f"Fallback –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e2}")
    
    async def _run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                await self.application.stop()
                await self.application.shutdown()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise

if __name__ == '__main__':
    bot = StepikBot()
    bot.run()
